
projeto-micros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000432  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000290  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000245  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000192  00000000  00000000  00000ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "uart.h"



int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1 << DDB5);
  a0:	25 9a       	sbi	0x04, 5	; 4
	uart usb;
	
	usb.init(250000);
  a2:	40 e9       	ldi	r20, 0x90	; 144
  a4:	50 ed       	ldi	r21, 0xD0	; 208
  a6:	63 e0       	ldi	r22, 0x03	; 3
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 6d 00 	call	0xda	; 0xda <_ZN4uart4initEm>
	
	while (1) 
    {
		PORTB ^= (1<<PB5);
  b2:	10 e2       	ldi	r17, 0x20	; 32
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	81 27       	eor	r24, r17
  b8:	85 b9       	out	0x05, r24	; 5
		usb.println("Givaldo Lino");
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	71 e0       	ldi	r23, 0x01	; 1
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4uart7printlnEPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	89 e6       	ldi	r24, 0x69	; 105
  ca:	98 e1       	ldi	r25, 0x18	; 24
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x36>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x40>
  d6:	00 00       	nop
  d8:	ed cf       	rjmp	.-38     	; 0xb4 <main+0x1e>

000000da <_ZN4uart4initEm>:
#include "uart.h"
#include <stdint.h>
#include <avr/io.h>

// Initializes the uart
void uart::init(uint32_t baudRate){
  da:	9a 01       	movw	r18, r20
  dc:	ab 01       	movw	r20, r22
	// Value written on register
	uint16_t ubrr = (F_CPU/16/baudRate)-1; 
  de:	60 e4       	ldi	r22, 0x40	; 64
  e0:	72 e4       	ldi	r23, 0x42	; 66
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 a3 00 	call	0x146	; 0x146 <__udivmodsi4>
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	31 09       	sbc	r19, r1
	
	// Sets the baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  ee:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)ubrr;
  f2:	20 93 c4 00 	sts	0x00C4, r18
	
	// Enables transmitter
	UCSR0B = (1<<TXEN0);
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	80 93 c1 00 	sts	0x00C1, r24
	
	// Sets frame format to 8 data + 2 stop bits
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  fc:	8e e0       	ldi	r24, 0x0E	; 14
  fe:	80 93 c2 00 	sts	0x00C2, r24
 102:	08 95       	ret

00000104 <_ZN4uart7putcharEh>:
}

void uart::putchar(uint8_t data){
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	85 ff       	sbrs	r24, 5
 10c:	fd cf       	rjmp	.-6      	; 0x108 <_ZN4uart7putcharEh+0x4>
	
	// Writes the data to the register
	UDR0 = data;
 10e:	60 93 c6 00 	sts	0x00C6, r22
 112:	08 95       	ret

00000114 <_ZN4uart7printlnEPKc>:
}

void uart::println(const char * str){
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	8c 01       	movw	r16, r24
 11e:	eb 01       	movw	r28, r22
	int i = 0;
	// Prints until it encounters end of string character
	while(str[i] != '\0'){
 120:	68 81       	ld	r22, Y
 122:	66 23       	and	r22, r22
 124:	39 f0       	breq	.+14     	; 0x134 <_ZN4uart7printlnEPKc+0x20>
 126:	21 96       	adiw	r28, 0x01	; 1
		putchar((uint8_t)str[i]);
 128:	c8 01       	movw	r24, r16
 12a:	0e 94 82 00 	call	0x104	; 0x104 <_ZN4uart7putcharEh>
}

void uart::println(const char * str){
	int i = 0;
	// Prints until it encounters end of string character
	while(str[i] != '\0'){
 12e:	69 91       	ld	r22, Y+
 130:	61 11       	cpse	r22, r1
 132:	fa cf       	rjmp	.-12     	; 0x128 <_ZN4uart7printlnEPKc+0x14>
		putchar((uint8_t)str[i]);
		i++;
	}
	putchar('\n');
 134:	6a e0       	ldi	r22, 0x0A	; 10
 136:	c8 01       	movw	r24, r16
 138:	0e 94 82 00 	call	0x104	; 0x104 <_ZN4uart7putcharEh>
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <__udivmodsi4>:
 146:	a1 e2       	ldi	r26, 0x21	; 33
 148:	1a 2e       	mov	r1, r26
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	fd 01       	movw	r30, r26
 150:	0d c0       	rjmp	.+26     	; 0x16c <__udivmodsi4_ep>

00000152 <__udivmodsi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	ee 1f       	adc	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e4 07       	cpc	r30, r20
 160:	f5 07       	cpc	r31, r21
 162:	20 f0       	brcs	.+8      	; 0x16c <__udivmodsi4_ep>
 164:	a2 1b       	sub	r26, r18
 166:	b3 0b       	sbc	r27, r19
 168:	e4 0b       	sbc	r30, r20
 16a:	f5 0b       	sbc	r31, r21

0000016c <__udivmodsi4_ep>:
 16c:	66 1f       	adc	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	88 1f       	adc	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	1a 94       	dec	r1
 176:	69 f7       	brne	.-38     	; 0x152 <__udivmodsi4_loop>
 178:	60 95       	com	r22
 17a:	70 95       	com	r23
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	bd 01       	movw	r22, r26
 186:	cf 01       	movw	r24, r30
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
